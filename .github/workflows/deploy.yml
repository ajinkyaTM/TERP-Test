name: Deploy Salesforce to Main Org

on:
  push:
    branches: [main, UAT, QA]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Salesforce CLI
        run: npm install --global @salesforce/cli

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.13.2

      - name: Fetch base and head branches/commits
        run: |
          git fetch origin ${{ github.event.before }}:${{ github.event.before }}
          git fetch origin ${{ github.sha }}:${{ github.sha }}

      - name: Clean up old XML files
        run: |
          rm -f package.xml destructiveChanges.xml

      - name: Run generateXML.py
        id: generate-xml
        run: |
          set -e
          python generateXML.py --base_commit ${{ github.event.before }} --head_commit ${{ github.sha }}
          echo "Successfully run generateXML.py"

          if [ -f "package.xml" ]; then
            echo "packageChanges=true" >> $GITHUB_ENV
          else
            echo "packageChanges=false" >> $GITHUB_ENV
            echo "Package XML not found."
          fi

          if [ -f "destructiveChanges.xml" ]; then
            echo "destructiveChanges=true" >> $GITHUB_ENV
          else
            echo "destructiveChanges=false" >> $GITHUB_ENV
          fi

      - name: Debug XML output
        run: |
          echo "Checking for generated XML files..."
          ls -la
          cat package.xml || echo "No package.xml"
          cat destructiveChanges.xml || echo "No destructiveChanges.xml"

      - name: Set Org Credentials Based on Branch
        run: |
          BRANCH="${GITHUB_REF##*/}"
          echo "Branch: $BRANCH"
          if [[ "$BRANCH" == "main" ]]; then
            echo "SF_USERNAME=${{ secrets.SF_USERNAME_MAIN }}" >> $GITHUB_ENV
            echo "SF_CONSUMER_KEY=${{ secrets.SF_CONSUMER_MAIN_KEY }}" >> $GITHUB_ENV
          elif [[ "$BRANCH" == "UAT" ]]; then
            echo "SF_USERNAME=${{ secrets.SF_USERNAME_UAT }}" >> $GITHUB_ENV
            echo "SF_CONSUMER_KEY=${{ secrets.SF_CONSUMERUAT_KEY }}" >> $GITHUB_ENV
          elif [[ "$BRANCH" == "QA" ]]; then
            echo "SF_USERNAME=${{ secrets.SF_USERNAME_QA }}" >> $GITHUB_ENV
            echo "SF_CONSUMER_KEY=${{ secrets.SF_CONSUMER_QA_KEY }}" >> $GITHUB_ENV
          else
            echo "Unsupported branch: $BRANCH"
            exit 1
          fi

      - name: Decode JWT key
        if: ${{ env.packageChanges == 'true' || env.destructiveChanges == 'true' }}
        run: |
          echo "${{ secrets.SF_JWT_SECRET }}" > server.key

      - name: Authenticate with Salesforce (sf CLI)
        if: ${{ env.packageChanges == 'true' || env.destructiveChanges == 'true' }}
        run: |
          sf org login jwt \
            --client-id $SF_CONSUMER_KEY \
            --jwt-key-file server.key \
            --username $SF_USERNAME \
            --alias ci-org \
            --set-default

      - name: Deploy Metadata and/or Destructive Changes to Salesforce
        if: ${{ env.packageChanges == 'true' || env.destructiveChanges == 'true' }}
        run: |
          echo " Starting deployment..."
      
          if [[ "${{ env.packageChanges }}" == "true" && "${{ env.destructiveChanges }}" == "true" ]]; then
            echo " Deploying metadata and destructive changes (pre)..."
            sf project deploy start \
              --manifest package.xml \
              --pre-destructive-changes destructiveChanges.xml \
              --target-org ci-org \
              --test-level RunLocalTests \
              --wait 30 \
              --verbose
      
          elif [[ "${{ env.packageChanges }}" == "true" ]]; then
            echo " Deploying metadata only..."
            sf project deploy start \
              --manifest package.xml \
              --target-org ci-org \
              --test-level RunLocalTests \
              --wait 30 \
              --verbose
      
          elif [[ "${{ env.packageChanges }}" == "false" && "${{ env.destructiveChanges }}" == "true" ]]; then
            echo " Deleting destructive changes..."
            echo '<?xml version="1.0" encoding="UTF-8"?>
                    <Package xmlns="http://soap.sforce.com/2006/04/metadata">
                      <version>58.0</version>
                    </Package>' > package.xml

            sf project deploy start \
              --manifest package.xml \
              --pre-destructive-changes destructiveChanges.xml \
              --target-org ci-org \
              --test-level RunLocalTests \
              --wait 30 \
              --verbose
          fi
